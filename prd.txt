# ImmediateEarth 原型设计文档 (PRD)

## 1. 产品概述

ImmediateEarth是一款基于Tauri V2框架开发的跨平台桌面应用，旨在通过实时获取和处理Himawari-8卫星图像，为用户提供动态变化的地球桌面壁纸体验。应用结合了现代前端技术与高效的后端图像处理能力，实现了卫星图像的自动更新与系统壁纸的智能设置。

### 1.1 产品愿景
打造一款轻量级、高性能的跨平台壁纸抓取应用，让用户能够实时欣赏地球从太空视角展现的美丽景象，同时保持系统资源占用的最优化。

### 1.2 目标用户
- 对太空和地球科学感兴趣的用户
- 追求个性化桌面体验的电脑/Android/iOS用户
- 需要低干扰、美观桌面背景的专业人士

## 2. 核心功能

### 2.1 卫星图像获取与处理
- 定期从Himawari-8卫星服务器下载或预览最新图像瓦片
- 自动拼接图像瓦片，生成完整地球视图
- 根据时间和太阳位置进行图像增强处理
- 智能裁剪图像以适应不同窗口/设备分辨率

#### 图像裁剪算法实现细节
1. **窗口参数获取**：获取目标窗口的物理分辨率和缩放因子，计算实际像素尺寸
2. **比例计算**：
   - 计算窗口宽高比 (screen_ratio = width / height)
   - 计算原始图像宽高比 (img_ratio = img_width / img_height)
3. **黑边处理**：
   - 横屏窗口自动检测并处理卫星图像边缘黑边
   - 黑边宽度计算为图像宽度的1/12，左右对称裁剪
4. **时间自适应裁剪**：
   - 根据日本时间（UTC+9）动态调整裁剪区域：
     - 凌晨（0-6时）：保留图像底部区域，突出显示地球夜半球
     - 下午（15-24时）：保留图像右侧区域，适应地球自转
5. **比例适配策略**：
   - 当screen_ratio > img_ratio：裁剪图像高度，保留水平方向完整视野
   - 当screen_ratio < img_ratio：裁剪图像宽度，保留垂直方向完整视野

### 2.2 壁纸管理
- 右键可以选择设置为壁纸（移动端长按屏幕）
- 双击进入设置项

### 2.3 用户界面

> 像macbook锁屏界面

- 简洁的主界面，显示当前地球图像和基本信息
- 时钟叠加层，显示当前时间和日期
- 详细信息视图，展示卫星数据来源和处理信息

### 2.4 设置与偏好
- 图像质量调整（高/中/低）
- 自动启动选项
- 网络带宽使用控制
- 缓存管理与清理

## 3. 用户流程

### 3.1 首次启动流程
1. 用户启动应用
2. 显示欢迎界面，简要介绍功能
3. 提示用户授予必要的系统权限
4. 初始化设置（默认更新频率、图像质量）
5. 下载并处理初始卫星图像
6. 设置第一张壁纸并显示主界面

### 3.2 日常使用流程
1. 应用在后台定期检查新卫星图像
2. 加载预览并处理新图像（如可用）
3. 更新桌面壁纸
4. 用户可通过系统托盘或主界面手动触发更新
5. 用户可访问设置界面调整偏好

## 4. 技术架构

### 4.1 前端架构
- **框架**: Vue 3 + TypeScript
- **构建工具**: Vite
- **UI框架**: Tailwind CSS
- **状态管理**: Pinia
- **主要组件**:
  - `App.vue`: 应用入口组件
  - `MainView.vue`: 主界面组件
  - `DetailsView.vue`: 详细信息组件
  - `ClockOverlay.vue`: 时钟叠加层组件

### 4.2 后端架构
- **框架**: Tauri (Rust)
- **核心模块**:
  - 图像处理与优化模块
  - 跨平台壁纸设置模块
  - 系统资源监控与优化模块

### 4.3 数据流程
1. 定期从Himawari-8卫星服务器下载图像瓦片
2. 拼接瓦片生成完整地球图像
3. 根据时间和太阳位置进行艺术化处理
4. 针对不同显示器分辨率裁剪图像
5. 通过系统API设置为桌面壁纸
6. 清理旧图像，管理缓存

## 5. UI/UX设计规范

### 5.1 颜色方案
- 主色调: 深蓝色 (#165DFF) - 代表太空和科技感
- 辅助色: 青色 (#00CFFD) - 用于强调和交互元素
- 中性色: 深灰 (#1E293B)、中灰 (#64748B)、浅灰 (#F1F5F9) - 用于背景和文本

### 5.2 排版
- 标题字体: Inter, 粗体
- 正文字体: Inter, 常规
- 标题层级:
  - H1: 24px
  - H2: 20px
  - H3: 18px
  - 正文: 14px
  - 辅助文字: 12px

### 5.3 布局规范
- 边距: 16px (基础), 8px (紧凑), 24px (宽松)
- 圆角: 8px (标准), 4px (紧凑)
- 阴影: 0 4px 6px rgba(0, 0, 0, 0.1) (标准)

### 5.4 交互设计
- 按钮状态: 默认、悬停、点击、禁用
- 过渡动画: 平滑淡入淡出 (300ms)
- 加载状态: 骨架屏或进度指示器
- 错误状态: 清晰的错误提示和恢复选项

## 6. 技术要求与限制

### 6.1 最低系统要求
- Windows 10/11 (64位)
- 4GB RAM
- 100MB可用磁盘空间
- 稳定的互联网连接

### 6.2 性能目标
- 应用启动时间 < 3秒
- 图像更新处理时间 < 10秒
- 后台内存占用 < 100MB
- CPU使用率 < 5% (空闲时)

### 6.3 安全考虑
- 仅从可信来源下载卫星图像
- 限制文件系统访问范围
- 遵循Tauri安全最佳实践
- 定期更新依赖以修复安全漏洞

## 7. 项目计划与里程碑

### 7.1 阶段一: 基础功能（仅通过前端实现）
- 卫星图像抓取、拼接、预览、剪裁
- 智能图像预览剪裁
- 时间日期悬浮在图片上

## 8. 附录

### 8.1 数据来源
- Himawari-8卫星图像: 日本气象厅

### 8.2 技术参考
- Tauri文档: https://tauri.app/
- Vue 3文档: https://vuejs.org/
- Himawari-8数据API: https://www.data.jma.go.jp/mscweb/en/himawari89/

```js
// Himawari-8数据API
const now = new Date()
now.setUTCMinutes(now.getUTCMinutes() - 30)
const year = now.getUTCFullYear()
const month = String(now.getUTCMonth() + 1).padStart(2, '0')
const day = String(now.getUTCDate()).padStart(2, '0')
const hour = String(now.getUTCHours()).padStart(2, '0')
const minute = String(Math.floor(now.getUTCMinutes() / 10) * 10).padStart(2, '0')

const multiple = 4
const tileSize = 550
const urls: string[] = []
for (let y = 0; y < multiple; y++) {
    for (let x = 0; x < multiple; x++) {
    const url = `https://himawari.asia/img/D531106/${multiple}d/${tileSize}/${year}/${month}/${day}/${hour}${minute}00_${x}_${y}.png`
    urls.push(url)
    }
}
```

### 8.3 术语表
- 瓦片: 构成完整卫星图像的小图像片段
- 拼接: 将多个瓦片组合成完整图像的过程
- 拉伸: 调整图像大小以适应窗口/设备分辨率的方法